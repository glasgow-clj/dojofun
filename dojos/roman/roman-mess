(ns translations.roman-numerals)
(require '[clojure.string :as str])


(def numerals {"I" 1
               "II" 2
               "III" 3
               "IV" 4
               "V" 5
               "VI" 6
               "VII" 7
               "VIII" 8
               "IX" 9
               "X" 10})

(defn convert
  [x]
  (cond (= "I" x) 1
        (= "II" x) 2
        (= "III" x) 3
        (= "IV" x) 4
        (= "V" x) 5
        (= "VI" x) 6
        (= "VII" x) 7
        (= "VIII" x) 8
        (= "IX" x) 9
        (= "X" x) 10
        :else x
        ))

(defn convert2
  [x]
  (numerals x 0))

(defn comparitor
  [a b]
  (if (> a b) (+ b a)
              (- b a)))

(defn convert3
  [numeral]
  (let [split-chars (str/split numeral #"")
        first (convert (first split-chars))
        second (convert (second split-chars))
        ]
    (comparitor first second)))

(defn comparitor2
  [a b]
  (< b a))

(defn convert4
  [numeral]
  (let [split-chars (reverse (str/split numeral #""))]
    (comparitor (convert (first split-chars)) (convert (second split-chars)))
    ))

